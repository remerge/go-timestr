# http://stackoverflow.com/questions/322936/common-gnu-makefile-directory-path#comment11704496_324782
TOP := $(dir $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))

GOFMT=gofmt -w -s

GOSRCDIR=$(GOPATH)/src/$(PACKAGE)
GOPATHS=$(shell glide novendor | grep -v /main/)
GOFILES=$(shell git ls-files | grep '\.go$$')

MAINGO=$(wildcard main/*.go)
MAIN=$(patsubst main/%.go,%,$(MAINGO))

ifeq ($(GOTEST_TIMEOUT),)
	GOTEST_TIMEOUT=60s
endif

ifeq ($(GOMETALINTER_OPTS),)
	GOMETALINTER_OPTS=--enable-all --tests
endif

ifeq ($(GOMETALINTER_EXCLUDES),)
	GOMETALINTER_EXCLUDES=\
		--exclude "\.pb\.go:" \
		--exclude "_fsm\.go:" \
		--exclude "_easyjson\.go:" \
		--exclude "_test\.go:.*\((lll|unparam|gocyclo)\)$$" \
		--exclude "comment should be of the form.*\(golint\)$$" \
		--exclude "should have comment or be unexported.*\(golint\)$$"
endif

CODE_VERSION=$(TRAVIS_COMMIT)
ifeq ($(CODE_VERSION),)
	CODE_VERSION=$(shell git rev-parse --short HEAD)-dev
endif

CODE_BUILD=$(TRAVIS_REPO_SLUG)\#$(TRAVIS_JOB_NUMBER)
ifeq ($(CODE_BUILD),\#)
	CODE_BUILD=$(PACKAGE)\#$(shell whoami)
endif

LDIMPORT=$(PACKAGE)/vendor/github.com/remerge/go-service
LDFLAGS=-X $(LDIMPORT).CodeVersion=$(CODE_VERSION) -X $(LDIMPORT).CodeBuild=$(CODE_BUILD)@$(shell date -u +%FT%TZ)

.PHONY: build run clean lint test bench fmt dep init up gen proto-dep proto release deploy

all: build

build: fmt
	cd $(GOSRCDIR) && \
		CGO_ENABLED=0 \
		go test -v -i
	cd $(GOSRCDIR) && \
		CGO_ENABLED=0 \
		go build -v -i -ldflags "$(LDFLAGS)" $(GOPATHS)
	cd $(GOSRCDIR) && \
		CGO_ENABLED=0 \
		go build -v -i -ldflags "$(LDFLAGS)" $(MAINGO)

run: build
	./$(MAIN)

clean:
	cd $(GOSRCDIR) && \
		go clean -i -x
	rm -f $(MAIN)

lint: build
	cd $(GOSRCDIR) && \
		gometalinter \
			--vendor --vendored-linters \
			--deadline=$(GOTEST_TIMEOUT) \
			$(GOMETALINTER_OPTS) \
			$(GOMETALINTER_EXCLUDES) \
			-D test -D testify \
			$(GOPATHS)

test: lint
	cd $(GOSRCDIR) && \
		go test -timeout $(GOTEST_TIMEOUT) -v $(GOPATHS)

bench: build
	cd $(GOSRCDIR) && \
		go test -bench=. -benchmem -cpu 32 $(GOPATHS)

escape: build
	for pkg in $(GOPATHS); do \
		cd $(GOSRCDIR) && \
			CGO_ENABLED=0 \
			go build -v -gcflags '-m -m -l -e' -ldflags "$(LDFLAGS)" $$pkg; \
	done

fmt:
	$(GOFMT) $(GOFILES)

dep:
	go get -u github.com/Masterminds/glide
	go get -u github.com/alecthomas/gometalinter
	gometalinter --install --update
	cd $(GOSRCDIR) && glide install

init:
	cd $(GOSRCDIR) && \
		glide init

up:
	cd $(GOSRCDIR) && \
		glide update

gen:
	cd $(GOSRCDIR) && \
		go generate $(GOPATHS)
	$(GOFMT) $(GOFILES)

PROTOS=$(wildcard *.proto */*.proto)
PBGOS=$(patsubst %.proto,%.pb.go,$(PROTOS))

proto-dep:
	go get -u github.com/gogo/protobuf/protoc-gen-gogofaster

proto: proto-dep $(PBGOS)

$(PBGOS): %.pb.go: %.proto
	protoc --gogofaster_out=. -I=.:$(TOP)/vendor:$(GOPATH)/src $<

release:
	git push origin master master:production

deploy:
	/bin/bash -c 'cd ../chef.new && knife ssh roles:$(PROJECT) sudo chef-client'
	/bin/bash -c 'cd ../chef && knife sudo -Q roles:$(PROJECT) chef-client'
