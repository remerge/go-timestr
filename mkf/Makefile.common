# CircleCI checks out projects into ~/project, so use the repo name instead
PROJECT ?= $(or $(CIRCLE_PROJECT_REPONAME), $(notdir $(patsubst %/,%,$(CURDIR))))
PACKAGE ?= github.com/remerge/$(PROJECT)

MKF_PREFIX ?= mkf
MKF_BRANCH ?= master

# all go sources in build tree excluding vendor
GO_SOURCES = $(shell find . -type f \( -iname '*.go' \) -not \( -path "./vendor/*" -path ".*" \))

export GO111MODULE = on
export CGO_ENABLED = 0
export GOPRIVATE ?= github.com/remerge/*

# do not use automatic targets
.SUFFIXES:

.PHONY: clean gen


# External tools

# Use as prerequisite. Requested tool will be installed automatically on demand.
#
# 	lint-shadow: $(TOOLS)/golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow $(GO_SOURCES)
#		go vet -vettool=$< ./...
#

TOOLS ?= $(MKF_PREFIX)/.tools
$(TOOLS)/%:
	test -x "$@" || GO111MODULE=off GOBIN=$(shell pwd)/$(dir $@) go get -u $*


# Code maintenance

GENERATE_SOURCES ?=

gen: $(GENERATE_SOURCES)
	go generate ./...
	$(MAKE) fmt

fmt:: .fmt-gofmt .fmt-goimports

GOFMT_EXCLUDES ?= %.pb.go %_gen.go %_easyjson.go
GOFMT_SOURCES = $(filter-out $(GOFMT_EXCLUDES),$(GO_SOURCES))

.fmt-gofmt: $(GOFMT_SOURCES)	## format go sources
	gofmt -w -s -l $^
	
.fmt-goimports: $(TOOLS)/golang.org/x/tools/cmd/goimports $(GOFMT_SOURCES)	## group and correct imports
	$< -w -l $(GOFMT_SOURCES)

# if included update the makefile subtree to the latest version
check-makefile-remote:
	git remote | grep makefile || git remote add makefile https://github.com/remerge/go-makefile.git && git fetch -a -p makefile

update-makefile: check-makefile-remote
	git subtree pull --squash --prefix=$(MKF_PREFIX) makefile $(MKF_BRANCH)

clean::
	rm -rf $(TOOLS)

# Dependencies cleanup

mod-tidy:	## tidy go.mod
	go mod tidy
.NOTPARALLEL: mod-tidy
.PHONY: mod-tidy


# Testing

TEST_TIMEOUT ?= 600s
TESTS ?= .
TEST_TAGS ?=
TEST_ARGS ?=

test: $(GO_SOURCES) go.mod	## regular tests
	go test $(TEST_ARGS) -tags="$(TEST_TAGS)" -timeout=$(TEST_TIMEOUT) -run=$(TESTS) ./...

race: $(GO_SOURCES) go.mod	## race tests
	CGO_ENABLED=1 go test  $(TEST_ARGS) -tags="$(TEST_TAGS)" -race -timeout=$(TEST_TIMEOUT) -run=$(TESTS) ./...

bench: $(GO_SOURCES) go.mod	## benchmarks
	go test  $(TEST_ARGS) -tags="$(TEST_TAGS)" -run=^$ -bench=$(TESTS) -benchmem -cpu 32 ./...

test-nocache: $(GO_SOURCES) go.mod
	go test  $(TEST_ARGS) -tags="$(TEST_TAGS)" -count=1 -timeout=$(TEST_TIMEOUT) -run=$(TESTS) ./...

race-nocache: $(GO_SOURCES) go.mod
	CGO_ENABLED=1 go test  $(TEST_ARGS) -tags="$(TEST_TAGS)" -race -count=1 -timeout=$(TEST_TIMEOUT) -run=$(TESTS) ./...

escape: $(GO_SOURCES) go.mod ## builds with escape analysis active
	go build -v -gcflags '-m -m -l -e' ./...


watch: $(TOOLS)/github.com/cespare/reflex
	$< -r '\.go$$' -s -- sh -c 'clear && go test -v -run=Test$(T)'
.PHONY: watch

# Linting

# *lint* target will run go fmt check, vet, goimports and revive. Revive
# config can be overriden by putting "revive.toml" into the build tree root.
# Use "REVIVELINTER_EXCLUDES" to exclude files from revive.
# Use "GOFMT_EXCLUDES" to exclude files from gofmt and goimports.
# Use "VET_FLAGS" to define vet linter flags.

lint:: .lint-mod-tidy .lint-fmt .lint-goimports .lint-vet .lint-shadow .lint-revive .lint-fix ## run all linters

lint-mkf: check-makefile-remote
	@DIFF=`git diff --name-only --relative HEAD:$(MKF_PREFIX)/ makefile/$(MKF_BRANCH):./` && echo "$$DIFF" && test -z "$$DIFF"
.PHONY: .lint-mkf

.lint-fmt: $(GOFMT_SOURCES) ## compare gofmt and goimports output
	@test -z "$(GOFMT_SOURCES)" || DIFF=`gofmt -s -d $(GOFMT_SOURCES)` && test -z "$$DIFF" || echo "$$DIFF" && test -z "$$DIFF"

.lint-goimports: $(TOOLS)/golang.org/x/tools/cmd/goimports $(GOFMT_SOURCES)
	@test -z "$(GOFMT_SOURCES)" || DIFF=`$< -d $(GOFMT_SOURCES)` && test -z "$$DIFF" || echo "$$DIFF" && test -z "$$DIFF"

.lint-vet: $(GO_SOURCES) go.mod ## run vet
	go vet $(VET_FLAGS) ./...
.NOTPARALLEL: .lint-vet

.lint-shadow: $(TOOLS)/golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow $(GO_SOURCES) ## run shadow linter
	go vet -vettool=$< ./...
.NOTPARALLEL: .lint-shadow

REVIVE_CONFIG = $(or $(wildcard revive.toml),$(MKF_PREFIX)/revive.toml)
.lint-revive: $(TOOLS)/github.com/mgechev/revive $(GO_SOURCES) $(REVIVE_CONFIG)	## run revive linter
	$< -config $(REVIVE_CONFIG) -formatter friendly -exclude ./vendor/... $(REVIVELINTER_EXCLUDES) ./...

.lint-fix: $(GO_SOURCES) ## run fix
	@DIFF=`go tool fix -diff $^` && test -z "$$DIFF" || echo "$$DIFF" && test -z "$$DIFF"

.lint-mod-tidy:	## check go mod tidy is applied
	rm -f go.sum /tmp/$(PROJECT).go.mod.tidy.bak /tmp/$(PROJECT).go.mod.tidy
	cp go.mod /tmp/$(PROJECT).go.mod.tidy.bak
	go mod tidy
	mv go.mod /tmp/$(PROJECT).go.mod.tidy
	mv /tmp/$(PROJECT).go.mod.tidy.bak go.mod
	diff go.mod /tmp/$(PROJECT).go.mod.tidy
.NOTPARALLEL: .lint-mod-tidy
.PHONY: .lint-mod-tidy

lint-mod-outdated:  ## check outdated deps
	rm -f go.sum /tmp/$(PROJECT).go.mod.bak /tmp/$(PROJECT).go.mod.up
	cp go.mod /tmp/$(PROJECT).go.mod.bak
	go get -u
	go mod tidy
	mv go.mod /tmp/$(PROJECT).go.mod.up
	mv /tmp/$(PROJECT).go.mod.bak go.mod
	diff go.mod /tmp/$(PROJECT).go.mod.up
.NOTPARALLEL: .lint-mod-tidy
.PHONY: .lint-mod-tidy
